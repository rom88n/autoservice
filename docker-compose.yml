version: "2"

services:
  backend:
    hostname: backend
    container_name: backend
    build:
      context: ./api
      dockerfile: ./Dockerfile
    env_file:
      - api/.env
    command: sh -c "npm run start"
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_HOSTNAME=db
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB=${MONGO_DB}
    ports:
      - "3030:3030"
    networks:
      - frontend
      - backend
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/api:cached

  frontend:
    hostname: frontend
    container_name: frontend
    command: sh -c "npm run dev"
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    environment:
      BACKEND_HTTP_API_ENDPOINT: http://backend:3030
    volumes:
      - ./frontend/src:/frontend/src:cached
    depends_on:
      - db
    networks:
      - frontend

  db:
    container_name: autoservice-db
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: autoservice-app
      MONGO_INITDB_ROOT_USERNAME: serviceuser
      MONGO_INITDB_ROOT_PASSWORD: 12345678
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo db:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./api/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb_data_container:/data/db
    ports:
      - "27017-27019:27017-27019"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodb_data_container:
